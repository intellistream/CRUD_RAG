import argparse
import json

from src.components.prompter.invocation_layers.llama_cpp import LlamaCPPInvocationLayer


def get_arg_parser():
    parser = argparse.ArgumentParser()
    # Dataset related options
    parser.add_argument('--data_path', default='data/crud_split/split_merged.json', help="Path to the dataset")
    parser.add_argument('--shuffle', type=bool, default=True, help="Whether to shuffle the dataset")
    # Store related options
    parser.add_argument('--store_type', type=str, choices=['elasticsearch', 'faiss', 'inmemory'],
                        default='faiss',
                        help="Type of document store to use ('elasticsearch', 'milvus', 'faiss', 'inmemory')")
    parser.add_argument('--store_config', type=json.loads, default={},
                        help="JSON string of document store configuration options. Example: '{\"host\": \"localhost\", \"port\": 9200}'")
    # Index related options
    parser.add_argument('--docs_path', default='data/test_docs', help="Path to the retrieval documents")
    parser.add_argument('--docs_type', default="txt", help="Type of the documents")
    parser.add_argument('--chunk_size', type=int, default=128, help="Chunk size")
    parser.add_argument('--chunk_overlap', type=int, default=0, help="Overlap chunk size")
    parser.add_argument('--construct_index', action='store_true', help="Whether to construct an index")
    parser.add_argument('--add_index', action='store_true', default=False, help="Whether to add an index")
    parser.add_argument('--collection_name', default="docs_80k_chuncksize_128_0", help="Name of the collection")
    # Embedder related options
    parser.add_argument('--create_embedder', action='store_true', default=True, help="Whether to create the embedder")
    parser.add_argument('--embedder_name', default='haystack', help="Name of embedder to use")
    parser.add_argument('--query_embedding_model', default='sentence-transformers/multi-qa-mpnet-base-dot-v1')
    parser.add_argument('--passage_embedding_model', default='sentence-transformers/multi-qa-mpnet-base-dot-v1')
    parser.add_argument('--embedding_dim', type=int, default=768)
    # Retriever related options
    parser.add_argument('--retriever_type', type=str,
                        choices=['bm25', 'dpr', 'embedding'], default = "embedding", help = "Type of the retriever")
    parser.add_argument('--retrieve_top_k', type=int, default=8, help="Top k documents to retrieve")
    # Reranker related options
    parser.add_argument('--reranker_type', default="simple", help="Type of the retriever")
    parser.add_argument('--need_reranker', action='store_true', default=False, help="Whether to use a reranker")
    # Prompter (Generator) related options
    parser.add_argument('--model_name_or_path', default='MBZUAI/LaMini-Cerebras-111M',
                        help="Name or path of the model to use")
    parser.add_argument('--invocation_layer_class', default=LlamaCPPInvocationLayer,
                        help="the invocation layer class to use")
    parser.add_argument('--temperature', type=float, default=0.1,
                        help="Controls the randomness of the model's text generation")
    parser.add_argument('--max_new_tokens', type=int, default=1280,
                        help="Maximum number of new tokens to be generated by the model")
    parser.add_argument('--prompter_type', default="lfqa", help="Type of the prompter")
    # Pipeline related options
    parser.add_argument('--pipeline_type', default="basic", help="Type of the pipeline")
    # Metric related options
    parser.add_argument('--quest_eval', action='store_true', help="Whether to use QA metrics (RAGQuestEval)")
    parser.add_argument('--bert_score_eval', action='store_true', help="Whether to use bert_score metrics")
    # Evaluation related options
    parser.add_argument('--task', default='event_summary', help="Task to perform")
    parser.add_argument('--num_threads', type=int, default=1, help="Number of threads")
    parser.add_argument('--show_progress_bar', action='store', default=True, type=bool,
                        help="Whether to show a progress bar")
    parser.add_argument('--contain_original_data', action='store_true', help="Whether to contain original data")
    return parser
